# Meson's Python module doesn't support crosscompiling,
# and python dependencies may be another potential hurdle.
# There might also be a need to run runtime tests during configure time.
#
# The recommended practice is to rely on Docker to provide the x86_64 crosscompile toolchain,
# enabling native execution via binfmt.
#
# In simpler terms, everything except the crosscompile toolchain will be emulated.

name: Build - Linux Qemu

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

defaults:
  run:
    shell: bash

jobs:
  qemu:
    # To enable this workflow on a fork, comment out:
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        BUILD_PROP:
          - [
              "armhf",
              "arm-linux-gnueabihf",
              "arm32v7/ubuntu:22.04",
          ]
          - [
              "ppc64le",
              "powerpc64le-linux-gnu",
              "ppc64le/ubuntu:22.04",
          ]
          - [
              "ppc64le - baseline(Power9)",
              "powerpc64le-linux-gnu",
              "ppc64le/ubuntu:22.04",
          ]
          - [
              "s390x",
              "s390x-linux-gnu",
              "s390x/ubuntu:22.04",
          ]
          - [
              "s390x - baseline(Z13)",
              "s390x-linux-gnu",
              "s390x/ubuntu:22.04",
          ]
          - [
              "riscv64",
              "riscv64-linux-gnu",
              "riscv64/ubuntu:22.04",
          ]
    env:
      TOOLCHAIN_NAME: ${{ matrix.BUILD_PROP[1] }}
      DOCKER_CONTAINER: ${{ matrix.BUILD_PROP[2] }}
      TERM: xterm-256color

    name: "${{ matrix.BUILD_PROP[0] }}"
    steps:
    - uses: actions/checkout@v4
    - name: Initialize binfmt_misc for qemu-user-static
      run: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Install GCC cross-compilers
      run: |
        sudo apt update
        sudo apt install -y ninja-build gcc-${TOOLCHAIN_NAME} g++-${TOOLCHAIN_NAME}

    - name: Cache docker container
      uses: actions/cache@v4
      id: container-cache
      with:
        path: ~/docker_${{ matrix.BUILD_PROP[1] }}
        key: container-${{ runner.os }}-${{ matrix.BUILD_PROP[1] }}-${{ matrix.BUILD_PROP[2] }}

    - name: Creates new container
      if: steps.container-cache.outputs.cache-hit != 'true'
      run: |
        docker run --name the_container --interactive -v /:/host -v $(pwd):/libnpymath ${DOCKER_CONTAINER} /bin/bash -c "
          apt update &&
          apt install -y git python3 python-is-python3 python3-dev python3-pip &&
          mkdir -p /lib64 && ln -s /host/lib64/ld-* /lib64/ &&
          ln -s /host/lib/x86_64-linux-gnu /lib/x86_64-linux-gnu &&
          rm -rf /usr/${TOOLCHAIN_NAME} && ln -s /host/usr/${TOOLCHAIN_NAME} /usr/${TOOLCHAIN_NAME} &&
          rm -rf /usr/lib/gcc/${TOOLCHAIN_NAME} && ln -s /host/usr/lib/gcc-cross/${TOOLCHAIN_NAME} /usr/lib/gcc/${TOOLCHAIN_NAME} &&
          rm -f /usr/bin/gcc && ln -s /host/usr/bin/${TOOLCHAIN_NAME}-gcc /usr/bin/gcc &&
          rm -f /usr/bin/g++ && ln -s /host/usr/bin/${TOOLCHAIN_NAME}-g++ /usr/bin/g++ &&
          rm -f /usr/bin/ar && ln -s /host/usr/bin/${TOOLCHAIN_NAME}-ar /usr/bin/ar &&
          rm -f /usr/bin/as && ln -s /host/usr/bin/${TOOLCHAIN_NAME}-as /usr/bin/as &&
          rm -f /usr/bin/ld && ln -s /host/usr/bin/${TOOLCHAIN_NAME}-ld /usr/bin/ld &&
          rm -f /usr/bin/ld.bfd && ln -s /host/usr/bin/${TOOLCHAIN_NAME}-ld.bfd /usr/bin/ld.bfd &&
          rm -f /usr/bin/ninja && ln -s /host/usr/bin/ninja /usr/bin/ninja &&
          git config --global --add safe.directory /libnpymath &&
          python -m pip install meson &&
          rm -f /usr/local/bin/ninja && mkdir -p /usr/local/bin && ln -s /host/usr/bin/ninja /usr/local/bin/ninja
        "
        docker commit the_container the_container
        mkdir -p "~/docker_${TOOLCHAIN_NAME}"
        docker save -o "~/docker_${TOOLCHAIN_NAME}/the_container.tar" the_container

    - name: Load container from cache
      if: steps.container-cache.outputs.cache-hit == 'true'
      run: docker load -i "~/docker_${TOOLCHAIN_NAME}/the_container.tar"

    - name: Meson Build
      run: |
        docker run --rm -e "TERM=xterm-256color" -v $(pwd):/libnpymath -v /:/host the_container \
        /bin/script -e -q -c "/bin/bash --noprofile --norc -eo pipefail -c '
          cd /libnpymath && meson setup build && meson compile -C build -v
        '"

    - name: Meson Log
      if: always()
      run: 'cat build/meson-logs/meson-log.txt'

    - name: Run C executable
      run: |
        docker run --rm -e "TERM=xterm-256color" -v $(pwd):/libnpymath -v /:/host the_container \
        /bin/script -e -q -c "/bin/bash --noprofile --norc -eo pipefail -c '
          cd /libnpymath && ./build/mainc
        '"

    - name: Run C++ executable
      run: |
        docker run --rm -e "TERM=xterm-256color" -v $(pwd):/libnpymath -v /:/host the_container \
        /bin/script -e -q -c "/bin/bash --noprofile --norc -eo pipefail -c '
          cd /libnpymath && ./build/maincpp
        '"
